import pygame
import random
from enum import Enum
from collections import namedtuple
import numpy as np
import time

pygame.init()
class Direction(Enum):
    RIGHT = 1
    LEFT = 2
    UP = 3
    DOWN = 4

Point = namedtuple('Point', 'x, y')
# rgb color codes
white = (255, 255, 255)
red = (200, 0, 0)
blue1 = (0, 0, 255)
blue2 = (0, 100, 255)
black = (0, 0, 0)
yellow = (255, 255, 0)
font = pygame.font.SysFont("arial", 25)
win_font = pygame.font.SysFont("arial", 35)

block_size = 30
speed = 20

class SnakeGameAI:
    def __init__(self, width=17*block_size, height=16*block_size):
        # Display
        self.width = width
        self.height = height
        self.display = pygame.display.set_mode((self.width, self.height))
        pygame.display.set_caption("Snake")
        self.clock = pygame.time.Clock()
        self.reset()

    def reset(self):
        self.direction = Direction.RIGHT
        self.head = Point(8*block_size, 7*block_size)
        self.snake = [self.head,
                      Point(self.head.x-block_size, self.head.y),
                      Point(self.head.x-2*block_size, self.head.y)]
        self.score = 0
        self.food = None
        self.place_food()
        self.frame_iter = 0

    def place_food(self):
        x = random.randint(0, (self.width-block_size)//block_size)*block_size
        y = random.randint(0, (self.height-block_size)//block_size)*block_size
        self.food = Point(x, y)
        if self.food in self.snake:
            self.place_food()

    def play_step(self, action):
        if self.score == 268:
            text = win_font.render("YOU WON!", True, yellow)
            self.display.blit(text, [154, 150])
            pygame.display.update()
            time.sleep(10)
            self.reset()
        self.frame_iter = self.frame_iter + 1
        # 1. COLLECT USER INPUT
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
        # 2. MOVE SNAKE
        self.mymove(action)
        self.snake.insert(0, self.head)
        # 3. CHECK GAME OVER
        reward = 0
        game_over = False
        if self.is_collision() or self.frame_iter > 100*len(self.snake):
            reward = -10
            game_over = True
            return reward, game_over, self.score  # score?
        # 4. PLACE NEW FOOD OR MOVE FURTHER
        if self.head == self.food:
            self.score = self.score + 1
            reward = 10
            self.place_food()
        else:
            self.snake.pop()
        # 5. UPDATE UI AND CLOCK
        self.update_ui()
        self.clock.tick(speed)
        # 6. RETURN GAME OVER AND SCORE
        return reward, game_over, self.score

    def is_collision(self, pt=None):
        if pt is None:
            pt = self.head
        if pt.x > self.width - block_size or pt.x < 0 or pt.y > self.height - block_size or pt.y < 0:
            return True
        if pt in self.snake[1:]:
            return True
        return False
    def update_ui(self):
        self.display.fill(black)
        hoofd = True  # head
        for pt in self.snake:
            if hoofd:
                pygame.draw.rect(self.display, blue1, pygame.Rect(pt.x, pt.y, block_size, block_size))
                if self.direction == Direction.LEFT:
                    pygame.draw.circle(self.display, white, (pt.x + 19.5, pt.y + 7.5), 5)
                    pygame.draw.circle(self.display, white, (pt.x + 19.5, pt.y + 22.5), 5)
                    pygame.draw.circle(self.display, black, (pt.x + 19.5, pt.y + 7.5), 2)
                    pygame.draw.circle(self.display, black, (pt.x + 19.5, pt.y + 22.5), 2)
                elif self.direction == Direction.RIGHT:
                    pygame.draw.circle(self.display, white, (pt.x + 10.5, pt.y + 7.5), 5)
                    pygame.draw.circle(self.display, white, (pt.x + 10.5, pt.y + 22.5), 5)
                    pygame.draw.circle(self.display, black, (pt.x + 10.5, pt.y + 7.5), 2)
                    pygame.draw.circle(self.display, black, (pt.x + 10.5, pt.y + 22.5), 2)
                elif self.direction == Direction.UP:
                    pygame.draw.circle(self.display, white, (pt.x + 7.5, pt.y + 19.5), 5)
                    pygame.draw.circle(self.display, white, (pt.x + 22.5, pt.y + 19.5), 5)
                    pygame.draw.circle(self.display, black, (pt.x + 7.5, pt.y + 19.5), 2)
                    pygame.draw.circle(self.display, black, (pt.x + 22.5, pt.y + 19.5), 2)
                elif self.direction == Direction.DOWN:
                    pygame.draw.circle(self.display, white, (pt.x + 7.5, pt.y + 10.5), 5)
                    pygame.draw.circle(self.display, white, (pt.x + 22.5, pt.y + 10.5), 5)
                    pygame.draw.circle(self.display, black, (pt.x + 7.5, pt.y + 10.5), 2)
                    pygame.draw.circle(self.display, black, (pt.x + 22.5, pt.y + 10.5), 2)
                hoofd = False
            else:
                pygame.draw.rect(self.display, blue1, pygame.Rect(pt.x, pt.y, block_size, block_size))
                pygame.draw.rect(self.display, blue2, pygame.Rect(pt.x+6, pt.y+6, 18, 18))
        pygame.draw.rect(self.display, red, pygame.Rect(self.food.x, self.food.y, block_size, block_size))
        text = font.render("Score: " + str(self.score), True, white)
        self.display.blit(text, [0, 0])
        pygame.display.flip()

    def mymove(self, action):
        clock_wise = [Direction.RIGHT, Direction.DOWN, Direction.LEFT, Direction.UP]
        index = clock_wise.index(self.direction)
        # [1, 0, 0] is straight ahead
        if np.array_equal(action, [1, 0, 0]):
            new_direction = clock_wise[index]
        elif np.array_equal(action, [0, 1, 0]):
            next_index = (index + 1) % 4
            new_direction = clock_wise[next_index]
        else:  # [0, 0, 1]
            next_index = (index - 1) % 4
            new_direction = clock_wise[next_index]
        self.direction = new_direction
        x = self.head.x
        y = self.head.y
        if self.direction == Direction.LEFT:
            x = x - block_size
        elif self.direction == Direction.RIGHT:
            x = x + block_size
        elif self.direction == Direction.UP:
            y = y - block_size
        elif self.direction == Direction.DOWN:
            y = y + block_size
        self.head = Point(x, y)
